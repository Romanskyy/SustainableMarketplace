# # Use a specific version of the Node.js image to ensure compatibility and use Alpine for a minimal footprint
# FROM node:18-alpine as development

# # Set the working directory inside the container to /app
# WORKDIR /app

# # Copy both package.json and package-lock.json (or yarn.lock)
# COPY package*.json ./

# # Install dependencies including 'devDependencies' for development
# RUN npm install

# # Copy the rest of the application code to the container
# COPY . .

# # Expose port 3000 which the application will listen to
# EXPOSE 3000

# # Command to run the application using npm
# CMD ["npm", "run", "dev"]

# SECOND EDITION:

# Use Node.js v18 image from Alpine Linux for a minimal base image
FROM node:18-alpine as development

# Set the working directory inside the Docker container to /app
WORKDIR /app

# Copy the package.json and package-lock.json (or yarn.lock) from the host to the container's working directory
COPY src/frontend/package*.json ./

# Install all dependencies defined in package.json, including development dependencies
RUN npm install

# Copy the entire frontend directory from the host to the container's working directory
COPY src/frontend/ ./

# Expose port 3000 for the application to be accessible externally
EXPOSE 3000

# Command to start the development server using npm
CMD ["npm", "run", "dev"]
